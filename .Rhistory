timesTwo(10)
devtools::document("/Users/kenneth/Downloads/RobustDC/")
library(RobustDC)
set.seed(1234)
## parameter setting
n <- 100
p <- 2000
x <- matrix(NA,n,p)
true.ind <- round(seq(1,p,length.out=s))
noise.ind <- (1:p)[-true.ind]
beta <- rep(0,p)
beta[true.ind] <- c(1,-1,1,-1)
simulate data
for(j in 1:p){
x[,j] <- rlnorm(n)
}
y <- x%*%beta + rnorm(n)
set.seed(1234)
## parameter setting
n <- 100
p <- 2000
s <- 4
x <- matrix(NA,n,p)
true.ind <- round(seq(1,p,length.out=s))
noise.ind <- (1:p)[-true.ind]
beta <- rep(0,p)
beta[true.ind] <- c(1,-1,1,-1)
simulate data
for(j in 1:p){
x[,j] <- rlnorm(n)
}
y <- x%*%beta + rnorm(n)
## simulate data
for(j in 1:p){
x[,j] <- rlnorm(n)
}
y <- x%*%beta + rnorm(n)
rdc.stat <- RDC(x,y,c1=0.5)
devtools::document("/Users/kenneth/Downloads/RobustDC")
devtools::document("/Users/kenneth/Downloads/RobustDC")
library(RobustDC)
rdc.stat <- RDC(x,y,c1=0.5)
?RDC
library(RobustDC)
x
rdc.stat <- RDC(x,y,c1=0.5)
library(RobustDC)
rdc.stat <- RDC(x,y,c1=0.5)
library(RobustDC)
rdc.stat <- RDC(x,y,c1=0.5)
devtools::check()
devtools::document("/Users/kenneth/Downloads/RobustDC")
library(RobustDC)
rdc.stat <- RDC(x,y,c1=0.5)
?RDC
y
y <- as.vector(y)
y
rdc.stat <- RDC(x,y,c1=0.5)
n
library(RobustDC)
testfun(2)
testfun(4)
rdc.stat <- RDC(x,y,c1=0.5)
y_mat[1]
head(y_mat)
class(y_mat)
?testfun
?RDC
library(RobustDC)
?RDC
compileAttributes()
library(devtools)
compileAttributes()
Rcpp::compileAttributes()
library(RobustDC)
testfun(4)
rdc.stat <- RDC(x,y,c1=0.5)
dim(index_mat)
library(Rcpp)
library(RcppArmadillo)
rdc.stat <- RDC(x,y,c1=0.5)
rdc.stat <- RDC(x,y,c1=1)
library(RobustDC)
rdc.stat <- RDC(x,y,c1=1)
warnings()
warnings()
library(RobustDC)
rdc.stat <- RDC(x,y,c1=1)
rdc.stat
set.seed(1234)
## parameter setting
n <- 100
p <- 1000
s <- 4
x <- matrix(NA,n,p)
true.ind <- round(seq(1,p,length.out=s))
noise.ind <- (1:p)[-true.ind]
beta <- rep(0,p)
beta[true.ind] <- c(1,-1,1,-1)
## simulate data
for(j in 1:p){
x[,j] <- rlnorm(n)
}
y <- x%*%beta + rnorm(n)
rdc.stat <- RDC(x,y,c1=0.5)
## parameter setting
n <- 50
p <- 500
s <- 2
x <- matrix(NA,n,p)
true.ind <- round(seq(1,p,length.out=s))
noise.ind <- (1:p)[-true.ind]
beta <- rep(0,p)
beta[true.ind] <- c(1,-1)
## simulate data
for(j in 1:p){
x[,j] <- rlnorm(n)
}
y <- x%*%beta + rnorm(n)
rdc.stat <- RDC(x,y,c1=0.5)
order(rdc.stat, decreasing = T)
true.ind
?RDC
cat 1
cat(!)
cat(1)
range(rdc.stat)
which.max(rdc.stat)
true.ind
rdc.stat[true.ind]
sort(rdc.stat,decreasing = T)[1:30]
order(rdc.stat,decreasing = T)[1:30]
true.ind
rdc.stat[500]
rdc.stat[29]
which.min(rdc.stat)
rdc.stat[216]
rdc.stat[1]
rdc.stat[46]
a
a <- c(2,4,3,1,5)
order(a, decreasing = T)
rank(a)
sort(a)
round(seq(1,p,length.out=s)
round(seq(1,p,length.out=s))
s
seq(1,10,length.out = 2)
seq(1,10,length.out = 3)
newx <- x[,order(rdc.stat, decreasing=T)[1:nrdc]]
nrdc=100
lambda=NULL, nfolds=10
lambda=NULL
nfolds=10
type.measure="deviance"
which.lambda="lambda.min"
newx <- x[,order(rdc.stat, decreasing=T)[1:nrdc]]
fit_cv <- glmnet::cv.glmnet(newx, y, lambda=lambda, nfolds=nfolds,
type.measure=type.measure)
fit_cv$lambda.min
fit_cv$lambda.1se
coef_cv <- coef(fit_cv, s = which.lambda)
head(coef_cv)
dim(coef_cv)
nrdc
coef_cv
coef_cv[-1,]
coef_cv <- coef(fit_cv, s = which.lambda)[-1,]
coef_cv
rdc.select <- order(rdc.stat, decreasing=T)[1:nrdc]
newx <- x[,rdc.select]
fit.cv <- glmnet::cv.glmnet(newx, y, lambda=lambda, nfolds=nfolds,
type.measure=type.measure)
coef.cv <- coef(fit.cv, s = which.lambda)[-1,]
reg_select <- which(coef.cv != 0)
reg_select
rdc.select
sort(order(rdc.stat, decreasing=T)[1:nrdc])
rdc.select <- sort(order(rdc.stat, decreasing=T)[1:nrdc])
newx <- x[,rdc.select]
fit.cv <- glmnet::cv.glmnet(newx, y, lambda=lambda, nfolds=nfolds,
type.measure=type.measure)
coef.cv <- coef(fit.cv, s = which.lambda)[-1,]
which(coef.cv != 0)
rdc.select[which(coef.cv != 0)]
reg.select <- rdc.select[which(coef.cv != 0)]
coef.cv
coef(fit.cv, s = which.lambda)[1]
coef(fit.cv, s = which.lambda)
as.vector(coef(fit.cv, s = which.lambda))
class(as.vector(coef(fit.cv, s = which.lambda)))
dim(as.vector(coef(fit.cv, s = which.lambda)))
length(as.vector(coef(fit.cv, s = which.lambda)))
RDC(x[,1:5],y)
lasso.select
lasso.select <- rdc.select[which(coef.cv != 0)]
RDC(scale(x[,1:5]),y)
m
m=matrix(12,3,4)
scale(m)
m
m=matrix(1:12,3,4)
scale(m)
m
m=matrix(rnorm(12),3,4)
scale(m)
as.vector(coef(fit.cv, s = which.lambda))
coef.cv <- as.vector(coef(fit.cv, s = which.lambda))
lasso.select
rdc.select[which(coef.cv[-1] != 0)]
lasso.fit=list(rdc.idx=rdc.idx, lasso.idx=lasso.idx, coef.est=coef.cv,
fit=fit.cv)
rdc.idx <- sort(order(rdc.stat, decreasing=T)[1:nrdc])
newx <- x[,rdc.idx]
fit.cv <- glmnet::cv.glmnet(newx, y, lambda=lambda, nfolds=nfolds,
type.measure=type.measure)
coef.cv <- as.vector(coef(fit.cv, s = which.lambda))
lasso.idx <- rdc.idx[which(coef.cv[-1] != 0)]
ff=list(rdc.idx=rdc.idx, lasso.idx=lasso.idx, coef.est=coef.cv,
fit=fit.cv)
ff$lasso.idx
RDC.lasso <- function(x, y, rdc.stat, nrdc, lambda=NULL, nfolds=10,
type.measure="deviance", which.lambda="lambda.min") {
n <- nrow(x)
p <- ncol(x)
y <- as.numeric(y)
rdc.idx <- sort(order(rdc.stat, decreasing=T)[1:nrdc])
newx <- x[,rdc.idx]
fit.cv <- glmnet::cv.glmnet(newx, y, lambda=lambda, nfolds=nfolds,
type.measure=type.measure)
coef.cv <- as.vector(coef(fit.cv, s = which.lambda))
lasso.idx <- rdc.idx[which(coef.cv[-1] != 0)]
return(list(rdc.idx=rdc.idx, lasso.idx=lasso.idx, coef.est=coef.cv,
fit=fit.cv))
}
lasso.fit <- RDC.lass(x,y,rdc.stat,nrdc=100)
lasso.fit <- RDC.lasso(x,y,rdc.stat,nrdc=100)
lasso.fit$lasso.idx
lasso.fit$rdc.idx
library(RobustDC)
?RDC.lasso
set.seed(1234)
## parameter setting
n <- 50
p <- 500
s <- 2
x <- matrix(NA,n,p)
true.ind <- round(seq(1,p,length.out=s))
noise.ind <- (1:p)[-true.ind]
beta <- rep(0,p)
beta[true.ind] <- c(1,-1)
## simulate data
for(j in 1:p){
x[,j] <- rlnorm(n)
}
y <- x%*%beta + rnorm(n)
rdc.stat <- RDC(x,y,c1=0.5)
lasso.fit <- RDC.lasso(x,y,rdc.stat,nrdc=100)
print(lasso.fit$rdc.idx)
print(lasso.fit$lasso.idx)
library(RobustDC)
?RDC.lasso
library(RobustDC)
library(RobustDC)
?RDC
